package carmo.tiago.ui;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Date;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.itextpdf.text.Anchor;
import com.itextpdf.text.Chapter;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.Image;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.PdfContentByte;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;

import carmo.tiago.services.NutPlanPOJO;
import javafx.stage.DirectoryChooser;

public class CreatePDF {

	private static Font catFont = new Font(Font.FontFamily.HELVETICA, 25, Font.BOLD);
	private static Font smallBold = new Font(Font.FontFamily.TIMES_ROMAN, 14, Font.BOLD);
	private static final Logger LOGGER = LoggerFactory.getLogger(CreatePDF.class);

	public static void createPDF(NutPlanPOJO rowData, String name) throws DocumentException, IOException {
		Document document = new Document();
		DirectoryChooser dirChooser = new DirectoryChooser();
		dirChooser.setTitle("Choose directory");
		String selectedDirPath = dirChooser.showDialog(LoginApp.getInstance().getStage()).getAbsolutePath();
		File downloadedFile = new File(selectedDirPath + "/" + name + ".pdf");
		PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(downloadedFile));
		document.open();
		addMetaData(document);
		addTitlePage(document, writer);
		addContent(document, rowData);
		document.close();
		LOGGER.info("PDF created");
	}

	private static void addMetaData(Document document) {
		document.addTitle("Nutrition Plan");
		document.addSubject("Nutrition necessities throughout the day. Created by Nutrition App by Tiago Carmo");
		document.addKeywords("Nutrition, Food, Plan");
		document.addAuthor(LoginApp.getInstance().getLoggedUser().getName());
		document.addCreator("Tiago Carmo");
	}

	private static void addTitlePage(Document document, PdfWriter writer) throws IOException, DocumentException {
		PdfContentByte canvas = writer.getDirectContentUnder();
		Image image = Image.getInstance(HomePageController.class.getResource("/Pictures/Health.jpg"));
		image.scaleAbsolute(PageSize.A5);
		image.setAbsolutePosition(90, 0);
		canvas.addImage(image);
		Paragraph preface = new Paragraph();
		addEmptyLine(preface, 1);
		preface.add(new Paragraph("Nutritional necessities", catFont));
		addEmptyLine(preface, 1);
		preface.add(new Paragraph(
				"Report generated by: " + LoginApp.getInstance().getLoggedUser().getName() + ", " + new Date(),
				smallBold));
		addEmptyLine(preface, 2);
		preface.add(new Paragraph(
				"This document was generated by the Nutriton App created by Tiago Carmo. In here you will find the amount of calories, protein, carbs and fat you should ingest throughout the day, according to your specified goal",
				smallBold));
		document.add(preface);
		document.newPage();
	}

	private static void addContent(Document document, NutPlanPOJO rowData) throws DocumentException {
		createParagraph(document, "Quantities");
		Paragraph paragraph = new Paragraph();
		addEmptyLine(paragraph, 3);
		document.add(paragraph);
		createTable(document, rowData);
	}

	private static void createParagraph(Document document, String type) throws DocumentException {
		Anchor anchor = new Anchor(type, catFont);
		anchor.setName(type);
		Chapter catPart = new Chapter(new Paragraph(anchor), 1);
		catPart.setNumberDepth(0);
		document.add(catPart);
	}

	private static void createTable(Document document, NutPlanPOJO rowData) throws DocumentException {
		PdfPTable table = new PdfPTable(4);
		PdfPCell c1 = new PdfPCell(new Phrase("Calories"));
		c1.setHorizontalAlignment(Element.ALIGN_CENTER);
		table.addCell(c1);
		c1 = new PdfPCell(new Phrase("Protein"));
		c1.setHorizontalAlignment(Element.ALIGN_CENTER);
		table.addCell(c1);
		c1 = new PdfPCell(new Phrase("Carbs"));
		c1.setHorizontalAlignment(Element.ALIGN_CENTER);
		table.addCell(c1);
		c1 = new PdfPCell(new Phrase("Fat"));
		c1.setHorizontalAlignment(Element.ALIGN_CENTER);
		table.addCell(c1);
		PdfPCell c2 = new PdfPCell(new Phrase(String.valueOf((int) rowData.getCalories()) + " gr"));
		c2.setHorizontalAlignment(Element.ALIGN_CENTER);
		table.addCell(c2);
		c2 = new PdfPCell(new Phrase(String.valueOf((int) rowData.getProtein()) + " gr"));
		c2.setHorizontalAlignment(Element.ALIGN_CENTER);
		table.addCell(c2);
		c2 = new PdfPCell(new Phrase(String.valueOf((int) rowData.getCarbs()) + " gr"));
		c2.setHorizontalAlignment(Element.ALIGN_CENTER);
		table.addCell(c2);
		c2 = new PdfPCell(new Phrase(String.valueOf((int) rowData.getFat()) + " gr"));
		c2.setHorizontalAlignment(Element.ALIGN_CENTER);
		table.addCell(c2);
		document.add(table);
	}

	private static void addEmptyLine(Paragraph paragraph, int number) {
		for (int i = 0; i < number; i++) {
			paragraph.add(new Paragraph(" "));
		}
	}

}
